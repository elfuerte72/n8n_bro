{
  "nodes": [
    {
      "parameters": {
        "toolDescription": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–∞–∑–¥–µ–ª—ã \"–û –∫–æ–º–ø–∞–Ω–∏–∏\" –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.",
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"perplexity/sonar\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('If').item.json.referenced }}\"\n    }\n  ],\n  \"temperature\": 0.1\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2176,
        1312
      ],
      "id": "7045f718-b925-439b-a990-6fee2eafda70",
      "name": "Perplexity: Sonar"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram —Ç—Ä–∏–≥–≥–µ—Ä–∞\nconst input = $input.first().json.message.text;\n\n// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL\nconst urlRegex = /(https?:\\/\\/[^\\s]+)/;\nconst match = input.match(urlRegex);\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\nreturn {\n  referenced: match ? match[0] : \"\",\n  hasUrl: !!match,\n  originalMessage: input, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n  telegramData: {\n    chatId: $input.first().json.message.chat.id,\n    messageId: $input.first().json.message.message_id,\n    userId: $input.first().json.message.from.id,\n    username: $input.first().json.message.from.username || \"unknown\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        1024
      ],
      "id": "2f2669e4-acc5-4c26-8f5a-e489837fa4f9",
      "name": "url stripe"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.referenced }}\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–µ–π —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π.\n\n–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°–ù–û–í–ù–£–Æ –∏–Ω–¥—É—Å—Ç—Ä–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –≤–µ–±-—Å–∞–π—Ç—É –∑–∞ –û–î–ò–ù –∞–Ω–∞–ª–∏–∑.\n\n## –ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–ò–ó–ê:\n\n### –®–ê–ì 1: –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –ú–ê–†–ö–ï–†–û–í\n–°–∫–∞–Ω–∏—Ä—É–π –≤ –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ú –ø–æ—Ä—è–¥–∫–µ:\n- Hero-—Å–µ–∫—Ü–∏—é (–≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ)\n- –†–∞–∑–¥–µ–ª \"Services\" / \"Products\" / \"What We Do\"\n- About Us (–ø–µ—Ä–≤—ã–µ 2 –∞–±–∑–∞—Ü–∞)\n- Portfolio / Case Studies (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n### –®–ê–ì 2: –ü–†–ò–ú–ï–ù–ï–ù–ò–ï DECISION TREE\n\n**–ü–ï–†–í–ò–ß–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø** (–æ—Ç–≤–µ—Ç—å –î–ê/–ù–ï–¢):\n- –ü—Ä–æ–¥–∞—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã? ‚Üí E-commerce/Manufacturing\n- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ü–û/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? ‚Üí Technology\n- –û–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –±–∏–∑–Ω–µ—Å—É? ‚Üí Business Services\n- –†–∞–±–æ—Ç–∞—é—Ç —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é? ‚Üí Real Estate\n- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏? ‚Üí Healthcare\n- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏? ‚Üí Education\n- –°—Ç—Ä–æ—è—Ç/–ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é—Ç? ‚Üí Construction\n- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏? ‚Üí Finance\n\n### –®–ê–ì 3: –¢–û–ß–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø\n\n#### üíª TECHNOLOGY:\n**–ú–∞—Ä–∫–µ—Ä—ã:** \"app development\", \"software solution\", \"SaaS\", \"digital transformation\", \"AI\", \"cybersecurity\"\n- Web Development & Digital Agency\n- SaaS Product  \n- Mobile App Development\n- Cybersecurity Services\n- AI/ML Solutions\n- IT Services/Consulting\n\n#### üíº BUSINESS SERVICES:\n**–ú–∞—Ä–∫–µ—Ä—ã:** \"consulting\", \"strategy\", \"HR\", \"marketing agency\", \"accounting\", \"legal\"\n- Management Consulting\n- Marketing & Advertising Agency\n- HR & Recruitment\n- Accounting Services\n- Legal Services\n\n#### üèóÔ∏è CONSTRUCTION & ENGINEERING:\n**–ú–∞—Ä–∫–µ—Ä—ã:** \"construction\", \"building\", \"architecture\", \"engineering\", \"contractor\"\n- Residential Construction\n- Commercial Construction\n- Architecture & Design\n- Civil Engineering\n\n#### üõí E-COMMERCE & RETAIL:\n**–ú–∞—Ä–∫–µ—Ä—ã:** \"shop\", \"store\", \"buy now\", \"products catalog\", \"e-commerce\"\n- Online Store\n- Fashion Retail\n- Electronics Retail\n- Marketplace Platform\n\n#### üè• HEALTHCARE:\n**–ú–∞—Ä–∫–µ—Ä—ã:** \"medical\", \"clinic\", \"doctor\", \"health\", \"treatment\", \"telemedicine\"\n- Medical Clinic\n- Dental Services\n- Telemedicine\n- Medical Equipment\n\n[... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏]\n\n## –ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n1. **Rule of Primary Revenue**: –ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥?\n2. **Rule of Client Focus**: B2B –∏–ª–∏ B2C –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n3. **Rule of Core Competency**: –ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞?\n\n## EDGE CASES:\n- –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ‚Üí –≤—ã–±–µ—Ä–∏ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ **–ø–µ—Ä–≤—ã–º —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è** –≤ hero-—Å–µ–∫—Ü–∏–∏\n- –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ ‚Üí —Å–º–æ—Ç—Ä–∏ –Ω–∞ **—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é** (digital, PR, creative)\n- –ï—Å–ª–∏ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ ‚Üí –æ–ø—Ä–µ–¥–µ–ª–∏ **–Ω–∏—à—É** (IT, management, financial)\n\n–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON):\n```json\n{\n  \"url\": \"[URL]\",\n  \"company_name\": \"[–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]\",\n  \"industry\": \"[—Ç–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è]\",\n  \"industry_reasoning\": \"[–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω–∞ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]\",\n  \"primary_markers\": [\"–º–∞—Ä–∫–µ—Ä1\", \"–º–∞—Ä–∫–µ—Ä2\", \"–º–∞—Ä–∫–µ—Ä3\"],\n  \"region\": \"[—Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥]\",\n  \"company_size\": \"startup/smb/enterprise\",\n  \"youtube\": \"[—Å—Å—ã–ª–∫–∞ –∏–ª–∏ null]\",\n  \"confidence\": \"high/medium/low\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2096,
        1008
      ],
      "id": "709c10fd-b3eb-4ac8-9b5a-44f60b650e4e",
      "name": "url analizator"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b7f4f4d1-b0fa-4f73-8b22-4375596c3128",
              "leftValue": "={{ $json.referenced }}",
              "rightValue": "https:",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1920,
        1024
      ],
      "id": "fc9f8a0d-8064-495c-8ec9-832a8e5bca70",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=- URL: {{ $json.output.url }}\n- –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {{ $json.output.industry }}\n- –†–µ–≥–∏–æ–Ω: {{ $json.output.region }}\n- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—è –æ–± –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: {{ $json.output.industry_info }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ü–†–Ø–ú–´–• –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö.\n\n\n\n–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–Ø–ú–û–ì–û –ö–û–ù–ö–£–†–ï–ù–¢–ê:\n‚úÖ –ü–†–Ø–ú–û–ô –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —ç—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–∞—è:\n- –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ò–î–ï–ù–¢–ò–ß–ù–´–ï –ø—Ä–æ–¥—É–∫—Ç—ã/—É—Å–ª—É–≥–∏\n- –†–∞–±–æ—Ç–∞–µ—Ç —Å –¢–ï–ú –ñ–ï —Ü–µ–ª–µ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤\n- –ò–º–µ–µ—Ç –°–•–û–ñ–ò–ô —Ä–∞–∑–º–µ—Ä (¬±50% –ø–æ –æ–±–æ—Ä–æ—Ç—É/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º)\n- –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–û–ô –ñ–ï –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–æ–Ω–µ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞)\n- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ê–ù–ê–õ–û–ì–ò–ß–ù–£–Æ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å\n\n‚ùå –ù–ï —è–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º—ã–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏:\n- –ö–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–º–µ–∂–Ω—ã—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏–π\n- –ö–æ–º–ø–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–æ–π –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å—é\n- –°–ª–∏—à–∫–æ–º –∫—Ä—É–ø–Ω—ã–µ/–º–µ–ª–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–∞–∑–Ω–∏—Ü–∞ >50%)\n- –ö–æ–º–ø–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–æ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n- –°–∞–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è\n\n–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:\n- –ö–æ–º–ø–∞–Ω–∏—è: {{ $json.output.company_name }}\n- –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {{ $json.output.industry }}\n- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: {{ $json.output.industry_info }}\n- –†–µ–≥–∏–æ–Ω: {{ $json.output.region }}\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:\n1. –ù–ò–ö–û–ì–î–ê –Ω–µ –≤–∫–ª—é—á–∞–π –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å–∞–º—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—É—é –∫–æ–º–ø–∞–Ω–∏—é {{ $json.output.company_name }}\n2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å URL {{ $json.output.url }} - —ç—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –ò–°–ö–õ–Æ–ß–ò –µ—ë\n3. –ü—Ä–æ–≤–µ—Ä—è–π –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ü–†–Ø–ú–û–ô –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç, –∞ –Ω–µ —Å–º–µ–∂–Ω—ã–π –±–∏–∑–Ω–µ—Å?\n\n–ê–õ–ì–û–†–ò–¢–ú –ü–û–ò–°–ö–ê:\n1. –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: \"[–∏–Ω–¥—É—Å—Ç—Ä–∏—è] companies in [—Ä–µ–≥–∏–æ–Ω] similar to [–∫–æ–º–ø–∞–Ω–∏—è]\"\n2. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏\n3. –ò—Å–∫–ª—é—á–∏ —Å–∞–º—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—É—é –∫–æ–º–ø–∞–Ω–∏—é\n4. –ü—Ä–æ–≤–µ—Ä—å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ü–†–Ø–ú–û–ì–û –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\n5. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ <15 –ø—Ä—è–º—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ä–∞—Å—à–∏—Ä—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–∏—Å–∫–∞\n\n–í–ê–õ–ò–î–ê–¶–ò–Ø (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞):\n- –û–±—ä—è—Å–Ω–∏ –ü–û–ß–ï–ú–£ —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n- –£–∫–∞–∂–∏ % —Å—Ö–æ–∂–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏ (0-100%)\n\n–ü–†–ò–û–†–ò–¢–ï–¢ –û–¢–ë–û–†–ê:\n1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞\n2. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å—Ö–æ–∂–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è  \n3. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º\n4. –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö\n\n–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):\n```json\n{\n  \"original_company\": {\n    \"url\": \"[URL]\",\n    \"industry\": \"[–∏–Ω–¥—É—Å—Ç—Ä–∏—è]\",\n    \"region\": \"[—Ä–µ–≥–∏–æ–Ω]\",\n    \"size\": \"[—Ä–∞–∑–º–µ—Ä]\"\n  },\n  \"competitors\": [\n    {\n      \"name\": \"[–Ω–∞–∑–≤–∞–Ω–∏–µ]\",\n      \"url\": \"[—Å–∞–π—Ç]\",\n      \"description\": \"[—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è]\",\n      \"size\": \"startup/smb/enterprise\",\n      \"region\": \"[—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥]\",\n      \"similarity_score\": 85,\n      \"why_competitor\": \"–ü—Ä—è–º–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: [–ø—Ä–∏—á–∏–Ω–∞]\"\n    }\n  ],\n  \"total_found\": 15\n}\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ù–∞–π–¥–∏ —Ä–æ–≤–Ω–æ 15 –ü–†–Ø–ú–´–• –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –ø—Ä—è–º—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ, —É–∫–∞–∂–∏ —ç—Ç–æ —è–≤–Ω–æ."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2416,
        1008
      ],
      "id": "1ef489dc-13fc-41e3-849b-7a62f7a20e64",
      "name": "Competitor Research"
    },
    {
      "parameters": {
        "toolDescription": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–∞–∑–¥–µ–ª—ã \"–û –∫–æ–º–ø–∞–Ω–∏–∏\" –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.",
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"perplexity/sonar\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"–ù–∞–π–¥–∏ 15 –∫–æ–º–ø–∞–Ω–∏–π-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {{ $json.output.company_name }} ({{ $json.output.url }}) –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ {{ $json.output.industry }} –≤ —Ä–µ–≥–∏–æ–Ω–µ {{ $json.output.region }}.\\n\\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\\n- –¢–û–õ–¨–ö–û –ø—Ä—è–º—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å—é\\n- –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ —Å–∞–π—Ç–∞–º–∏\\n- –ò–°–ö–õ–Æ–ß–ò –∏–∑ —Å–ø–∏—Å–∫–∞: {{ $json.output.company_name }} ({{ $json.output.url }})\\n\\n–î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —É–∫–∞–∂–∏:\\n1. –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ–±-—Å–∞–π—Ç\\n2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\\n3. –†–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (startup/smb/enterprise)\\n4. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\\n5. –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç\\n\\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞:\\n1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ {{ $json.output.region }}\\n2. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ñ–∏–ª—è\\n3. –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º\\n\\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å–ø–∏—Å–æ–∫ –∏–∑ 15 –∫–æ–º–ø–∞–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\"\n    }\n  ],\n  \"temperature\": 0.1\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2512,
        1328
      ],
      "id": "14fdff37-546b-46ef-b83f-c47a1ceeb943",
      "name": "Perplexity: Sonar1"
    },
    {
      "parameters": {
        "jsCode": "// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ items, –≥–¥–µ –µ—Å—Ç—å videos\nconst filteredItems = $input.all().filter(item => {\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n  return item.json.videos || \n         item.json.youtubeChannelFound || \n         (item.json.videos && item.json.videos.length > 0);\n});\n\nreturn filteredItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3936,
        688
      ],
      "id": "ee24953a-3cd6-421c-8995-f8223fe7dd48",
      "name": "Code"
    },
    {
      "parameters": {
        "updates": [
          "*"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        1632,
        1024
      ],
      "id": "ebda1ad2-3053-4a81-a924-ac07e858a0bd",
      "name": "Telegram Trigger",
      "webhookId": "c398e69d-0af0-4723-983f-e3870837e334"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.message_text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4624,
        480
      ],
      "id": "277f7f53-02b5-444c-936e-9ba20f45a33f",
      "name": "Send a text message",
      "webhookId": "9c33889b-ea40-46fa-bb03-73cf55c72cd2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "58a0cc65-56db-4ca9-ae39-9353e0dd13b9",
              "leftValue": "={{ $json.character_count }}",
              "rightValue": 4096,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4416,
        608
      ],
      "id": "f5aad3f9-6b7d-46f8-b832-64d3673ffdbe",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–¥—ã\nconst inputData = $input.first().json;\nconst fullText = $input.first().json.message_text\nconst maxLength = 4096; // –õ–∏–º–∏—Ç Telegram\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏\nfunction splitTextIntoChunks(text, maxLength) {\n  const chunks = [];\n  let currentChunk = '';\n  const lines = text.split('\\n');\n  \n  for (const line of lines) {\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–∏–π chunk\n    if ((currentChunk + line + '\\n').length <= maxLength) {\n      currentChunk += line + '\\n';\n    } else {\n      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π chunk –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤\n      if (currentChunk.trim()) {\n        chunks.push(currentChunk.trim());\n      }\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ª–∏–º–∏—Ç\n      if (line.length > maxLength) {\n        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏\n        let remainingLine = line;\n        while (remainingLine.length > maxLength) {\n          chunks.push(remainingLine.substring(0, maxLength));\n          remainingLine = remainingLine.substring(maxLength);\n        }\n        currentChunk = remainingLine ? remainingLine + '\\n' : '';\n      } else {\n        currentChunk = line + '\\n';\n      }\n    }\n  }\n  \n  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π chunk, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π\n  if (currentChunk.trim()) {\n    chunks.push(currentChunk.trim());\n  }\n  \n  return chunks;\n}\n\n// –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏\nconst textChunks = splitTextIntoChunks(fullText, maxLength);\n\n// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏\nconst outputItems = textChunks.map((chunk, index) => ({\n  json: {\n    message_text: chunk,\n    part_number: index + 1,\n    total_parts: textChunks.length,\n    character_count: chunk.length,\n    is_last_part: index === textChunks.length - 1,\n    original_total_characters: inputData.total_characters,\n    companies_count: inputData.companies_count,\n    timestamp: inputData.timestamp,\n    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)\n    message_with_header: index > 0 \n      ? `üìÑ –ß–∞—Å—Ç—å ${index + 1}/${textChunks.length}\\n\\n${chunk}`\n      : chunk\n  }\n}));\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4608,
        704
      ],
      "id": "a70f8272-84d9-4395-8b42-1b4715227705",
      "name": "Code2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4784,
        704
      ],
      "id": "705aff5f-2980-46ea-a904-7348b1a53c0a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.message_text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5120,
        784
      ],
      "id": "43680432-a7dd-4d7e-a7d5-93458dd967c0",
      "name": "Send a text message1",
      "webhookId": "9c33889b-ea40-46fa-bb03-73cf55c72cd2"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"url\": \"https://example.com\",\n  \"industry\": \"Technology/Software\",\n   \"industry_info\": \"Cybersecurity Services\",\n  \"company_name\": \"example\",\n  \"region\": \"USA, California\",\n  \"youtube\": \"https://youtube.com/channel/UCxxxxx\",\n  \"confidence\": \"high\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2080,
        1200
      ],
      "id": "618f6745-4923-4f7c-b6b6-774b0ad85578",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"original_company\": {\n    \"url\": \"https://www.cmolds.com/\",\n    \"company_name\": \"CMOLDS\",\n    \"industry\": \"Technology/Software\",\n    \"region\": \"UAE, Dubai\",\n    \"size\": \"smb\"\n  },\n  \"competitors\": [\n    {\n      \"name\": \"Appinventiv\",\n      \"url\": \"https://appinventiv.com\",\n      \"description\": \"Mobile app and software development company\",\n      \"size\": \"enterprise\",\n      \"region\": \"UAE, Dubai\",\n      \"similarity_score\": 85,\n      \"why_competitor\": \"Direct competitor offering identical mobile app development services in the same region\"\n    },\n    {\n      \"name\": \"TechGropse\",\n      \"url\": \"https://www.techgropse.com\",\n      \"description\": \"Mobile app development and IT consulting\",\n      \"size\": \"smb\",\n      \"region\": \"UAE, Dubai\",\n      \"similarity_score\": 90,\n      \"why_competitor\": \"Same size company providing mobile development services to similar client base\"\n    }\n  ],\n  \"total_found\": 15\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2416,
        1200
      ],
      "id": "318e6834-a32e-4d43-8304-ac1c35d20084",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2496,
        784
      ],
      "id": "6e301461-b811-4a4a-a90b-dc9d7eedc0e8",
      "name": "gpt4.1 mini"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4976,
        784
      ],
      "id": "181d2827-3960-42d2-906d-4ad81e8ebbbc",
      "name": "Wait3",
      "webhookId": "5bd5e788-66b0-452c-abb0-f0257a4060a7"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2896,
        1008
      ],
      "id": "df129d44-6b89-4c26-b3d1-370e78e4e7c3",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "jsCode": "// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ URL\nfunction extractMainDomain(url) {\n  try {\n    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ www\n    let cleanUrl = url.replace(/^https?:\\/\\//, '').replace(/^www\\./, '');\n    \n    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω (–¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª—ç—à–∞)\n    let domain = cleanUrl.split('/')[0];\n    \n    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å https://\n    return `https://${domain}`;\n  } catch (error) {\n    return url; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n  }\n}\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏\nfunction normalizeCompanySize(size) {\n  const sizeStr = size.toLowerCase();\n  if (sizeStr.includes('startup') || sizeStr.includes('51-200')) return 'startup';\n  if (sizeStr.includes('enterprise') || sizeStr.includes('large')) return 'enterprise';\n  return 'smb';\n}\n\n// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç AI Agent\nconst data = $input.first().json.output;\n\n// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\nconst originalCompany = {\n  ...data.original_company,\n  url: extractMainDomain(data.original_company.url),\n  size_category: normalizeCompanySize(data.original_company.size || 'smb')\n};\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\nconst processedCompetitors = data.competitors.map(competitor => ({\n  ...competitor,\n  url: extractMainDomain(competitor.url),\n  size_category: normalizeCompanySize(competitor.size || 'smb'),\n  competitor_id: competitor.name.toLowerCase().replace(/[^a-z0-9]/g, '-')\n}));\n\n// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ similarity_score (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)\nprocessedCompetitors.sort((a, b) => (b.similarity_score || 0) - (a.similarity_score || 0));\n\n// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\nconst items = processedCompetitors.map((competitor, index) => ({\n  json: {\n    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\n    competitor_name: competitor.name,\n    competitor_url: competitor.url,\n    competitor_description: competitor.description,\n    competitor_size: competitor.size,\n    competitor_size_category: competitor.size_category,\n    competitor_region: competitor.region,\n    similarity_score: competitor.similarity_score || 0,\n    why_competitor: competitor.why_competitor,\n    competitor_id: competitor.competitor_id,\n    \n    // –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏\n    rank: index + 1,\n    priority: index < 5 ? 'high' : index < 10 ? 'medium' : 'low',\n    \n    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n    original_company_name: originalCompany.company_name,\n    original_company_url: originalCompany.url,\n    original_company_industry: originalCompany.industry,\n    original_company_region: originalCompany.region,\n    original_company_size: originalCompany.size,\n    original_company_size_category: originalCompany.size_category,\n    \n    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞\n    analysis_timestamp: new Date().toISOString(),\n    analysis_date: new Date().toISOString().split('T')[0],\n    total_competitors_found: data.total_found,\n    analysis_id: `${originalCompany.company_name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}`,\n    \n    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n    is_same_region: competitor.region.toLowerCase().includes(originalCompany.region.toLowerCase().split(',')[0].toLowerCase()),\n    is_same_size: competitor.size_category === originalCompany.size_category,\n    is_high_similarity: competitor.similarity_score >= 80,\n    \n    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–¥–∞—Ö\n    tags: [\n      competitor.size_category,\n      competitor.similarity_score >= 80 ? 'high-similarity' : 'low-similarity',\n      index < 5 ? 'top-competitor' : 'secondary-competitor'\n    ]\n  }\n}));\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        1008
      ],
      "id": "dcc24aae-cc18-476f-bb3a-7184a07afbfb",
      "name": "Normalize URL & Sort"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3296,
        1280
      ],
      "id": "4105a682-5426-4e0a-92ce-696d12714d50",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ Loop Over Items\nconst companyName = $('Loop Over Items1').first().json.competitor_name;\nconst companyUrl = $('Loop Over Items1').first().json.competitor_url;\n\n// –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTTP Request\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞\nlet links = [];\nlet markdown = '';\n\n// –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ data\nif ($input.first().json.data) {\n  links = $input.first().json.data.links || [];\n  markdown = $input.first().json.data.markdown || '';\n}\n// –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ links\nelse if ($input.first().json.links) {\n  links = $input.first().json.links;\n  markdown = $input.first().json.markdown || '';\n}\n// –í–∞—Ä–∏–∞–Ω—Ç 3: –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞\nelse if ($input.first().json.response) {\n  links = $input.first().json.response.links || [];\n  markdown = $input.first().json.response.markdown || '';\n}\n\n// Debug: –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏\nconsole.log('Links found:', links.length);\nconsole.log('First 3 links:', links.slice(0, 3));\n\n// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube\nconst youtubePatterns = [\n  /https?:\\/\\/(www\\.)?(youtube\\.com|youtu\\.be|m\\.youtube\\.com)/i,\n  /youtube\\.com\\/(channel|c|user|@)/i\n];\n\n// –ù–∞—Ö–æ–¥–∏–º YouTube —Å—Å—ã–ª–∫–∏\nconst youtubeLinks = links.filter(link => {\n  if (!link) return false;\n  return youtubePatterns.some(pattern => pattern.test(link));\n});\n\n// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é YouTube —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)\nconst youtubeUrl = youtubeLinks.length > 0 ? youtubeLinks[0] : null;\n\n// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\nreturn {\n  json: {\n    companyName: companyName,\n    companyUrl: companyUrl,\n    youtubeChannelFound: youtubeLinks.length > 0,\n    youtubeChannelUrl: youtubeUrl,\n    allYoutubeLinks: youtubeLinks,\n    totalLinksScraped: links.length,\n    timestamp: new Date().toISOString(),\n    debugInfo: {\n      linksArrayLength: links.length,\n      firstLink: links[0] || 'No links found',\n      dataStructure: Object.keys($input.first().json).join(', ')\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3280,
        1088
      ],
      "id": "80fd2645-0e37-4758-88de-0824b61b6e0b",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fc-e3eb11966aff4575975db593826d3be8"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{ $json.competitor_url }}\",\n  \"formats\": [\n    \"links\",\n    \"markdown\"\n  ],\n  \"onlyMainContent\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3072,
        1104
      ],
      "id": "253a6c35-3d6c-4e6f-a5e1-11172f916dfd",
      "name": "firecrawl url",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3072,
        928
      ],
      "id": "65bc343b-4575-4de1-b54e-d4d4ba9fe260",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "youtubeChannelUrl"
            },
            {
              "fieldName": "companyName"
            },
            {
              "fieldName": "companyUrl"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        3232,
        928
      ],
      "id": "bd05773c-59d8-4239-bf8d-d803fcd0b923",
      "name": "Sort1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3568,
        768
      ],
      "id": "0e5c6005-6cfa-42ee-a220-9e43c6b5d025",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º URL –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è\nconst url = $json.youtubeChannelUrl; // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ $json.url\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\nif (!url) {\n  return {\n    error: 'YouTube channel URL not found',\n    originalData: $json\n  };\n}\n\nlet channelHandle = '';\n\nif (url.includes('youtube.com/@')) {\n  // –î–ª—è —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ https://www.youtube.com/@anthropic-ai\n  channelHandle = url.split('/@')[1].split('?')[0].split('/')[0];\n} else if (url.includes('youtube.com/c/')) {\n  // –î–ª—è —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ https://www.youtube.com/c/channelname\n  channelHandle = url.split('/c/')[1].split('?')[0].split('/')[0];\n} else if (url.includes('youtube.com/channel/')) {\n  // –î–ª—è —Å—Å—ã–ª–æ–∫ —Å Channel ID https://www.youtube.com/channel/UCxxxxx\n  channelHandle = url.split('/channel/')[1].split('?')[0].split('/')[0];\n} else if (url.includes('youtube.com/user/')) {\n  // –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ https://www.youtube.com/user/username\n  channelHandle = url.split('/user/')[1].split('?')[0].split('/')[0];\n}\n\nreturn {\n  companyName: $json.companyName,\n  originalUrl: url,\n  channelHandle: channelHandle,\n  searchQuery: channelHandle.startsWith('@') ? channelHandle : '@' + channelHandle\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3968,
        1040
      ],
      "id": "f16ab4db-f94f-4557-8a2a-232a5d93bcd9",
      "name": "split url"
    },
    {
      "parameters": {
        "operation": "get",
        "channelId": "={{ $json.items[0].id.channelId }}"
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        4560,
        1040
      ],
      "id": "cca52ffc-1f68-4792-a36e-3eeacbb9c30e",
      "name": "Get a channel1"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet"
            },
            {
              "name": "type",
              "value": "channel"
            },
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4128,
        1040
      ],
      "id": "0fd7f425-54a7-4319-84e1-215a04a9c9d6",
      "name": "get a id channel for nickname"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/playlistItems",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            },
            {
              "name": "playlistId",
              "value": "={{ $json.contentDetails.relatedPlaylists.uploads }}"
            },
            {
              "name": "part",
              "value": "snippet,contentDetails"
            },
            {
              "name": "maxResults",
              "value": "50"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4992,
        1040
      ],
      "id": "04e1fd81-3ee2-4b5f-b7f6-180db0bf50db",
      "name": "get playlist videos1",
      "retryOnFail": false,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–¥—ã\nconst response = $input.first().json;\nconst data = response.body || response;\n\n// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É–∑–ª–æ–≤\nlet prevNodeData = {};\nlet channelData = {};\ntry {\n  prevNodeData = $('Get a channel').first().json;\n} catch (e) {\n  prevNodeData = {};\n}\ntry {\n  channelData = $('sort data channel and get id').first().json;\n} catch (e) {\n  channelData = {};\n}\n\n// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\nlet companyName = $('Loop Over Items2').first().json.companyName;\nlet companyUrl = $('Loop Over Items2').first().json.companyUrl;\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö\nif (!data || !data.items || !Array.isArray(data.items)) {\n  return [{\n    json: {\n      company_name: companyName,\n      company_url: companyUrl,\n      filtered_videos: [],\n      total_videos: 0,\n      has_videos_to_check: false,\n      filter_reason: \"No playlist data available\",\n      processing_date: new Date().toISOString()\n    }\n  }];\n}\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ Shorts\nfunction isYouTubeShort(item) {\n  const title = (item.snippet.title || '').toLowerCase();\n  const description = (item.snippet.description || '').toLowerCase();\n  \n  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Shorts\n  const shortsIndicators = [\n    title.includes('#shorts'),\n    title.includes('#short'),\n    title.includes('#youtubeshorts'),\n    description.includes('#shorts'),\n    description.includes('#short'),\n    description.includes('#youtubeshorts'),\n    title.includes('shorts'),\n    description.startsWith('#shorts'),\n    title.match(/^#shorts/i)\n  ];\n  \n  return shortsIndicators.some(indicator => indicator);\n}\n\n// –§–∏–ª—å—Ç—Ä—ã\nconst oneYearAgo = new Date();\noneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\n// –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ\nconst videoIds = [];\nconst videoData = {};\nconst skippedVideos = {\n  tooOld: [],\n  shorts: []\n};\n\n// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\nlet totalVideos = 0;\nlet videosAfterDateFilter = 0;\nlet videosAfterShortsFilter = 0;\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ\nfor (let item of data.items) {\n  totalVideos++;\n  \n  try {\n    const publishedAt = new Date(item.snippet.publishedAt);\n    const videoTitle = item.snippet.title || 'Untitled';\n    const videoId = item.snippet.resourceId.videoId;\n    \n    // –§–∏–ª—å—Ç—Ä 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)\n    if (publishedAt < oneYearAgo) {\n      skippedVideos.tooOld.push({\n        id: videoId,\n        title: videoTitle,\n        published: publishedAt.toISOString()\n      });\n      continue;\n    }\n    videosAfterDateFilter++;\n    \n    // –§–∏–ª—å—Ç—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Shorts\n    if (isYouTubeShort(item)) {\n      skippedVideos.shorts.push({\n        id: videoId,\n        title: videoTitle\n      });\n      continue;\n    }\n    videosAfterShortsFilter++;\n    \n    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n    videoIds.push(videoId);\n    videoData[videoId] = {\n      title: videoTitle,\n      description: item.snippet.description,\n      published_at: item.snippet.publishedAt,\n      channel_title: item.snippet.channelTitle,\n      thumbnail: item.snippet.thumbnails?.high?.url || null\n    };\n    \n  } catch (e) {\n    console.log(\"Error processing video item:\", e.message);\n    continue;\n  }\n}\n\n// –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\nif (videoIds.length === 0) {\n  return [{\n    json: {\n      company_name: companyName,\n      company_url: companyUrl,\n      filtered_videos: [],\n      filtered_video_count: 0,\n      total_videos_in_playlist: totalVideos,\n      has_videos_to_check: false,\n      filter_stats: {\n        total: totalVideos,\n        after_date_filter: videosAfterDateFilter,\n        after_shorts_filter: videosAfterShortsFilter,\n        final_count: 0\n      },\n      filter_reason: `No suitable videos found. Total: ${totalVideos}, After date: ${videosAfterDateFilter}, After shorts filter: ${videosAfterShortsFilter}`,\n      processing_date: new Date().toISOString()\n    }\n  }];\n}\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)\nreturn [{\n  json: {\n    company_name: companyName,\n    company_url: companyUrl,\n    video_ids_to_check: videoIds.join(','),\n    video_data: videoData,\n    videos_to_check: videoIds.length,\n    has_videos_to_check: true,\n    filter_stats: {\n      total: totalVideos,\n      after_date_filter: videosAfterDateFilter,\n      after_shorts_filter: videosAfterShortsFilter,\n      to_check_duration: videoIds.length\n    },\n    skipped_videos: skippedVideos,\n    processing_date: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5344,
        1040
      ],
      "id": "882a4fcc-aee8-4013-a2b5-01e67279ae77",
      "name": "filter video1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eba8fc9d-0bea-4549-a617-0bbb9a0b31cf",
              "leftValue": "={{ $json.has_videos_to_check }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5472,
        1184
      ],
      "id": "b7bea6e1-3296-443f-91cf-c823379a54d8",
      "name": "video = true?1"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            },
            {
              "name": "id",
              "value": "={{ $json.video_ids_to_check }}"
            },
            {
              "name": "part",
              "value": "contentDetails"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5776,
        1040
      ],
      "id": "960f1ca7-3fe3-4c8d-adee-140270cd15f4",
      "name": "get video  >60sec1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "862188d5-d982-4075-9451-fbd983964089",
              "leftValue": "={{ !!$json.items && $json.items.length > 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5152,
        1184
      ],
      "id": "c8e54013-ea4e-4081-a773-f6c7398e5122",
      "name": "Valid playlist?1"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4816,
        1040
      ],
      "id": "572a9b49-1b9d-42ba-8838-cc1a98f22cca",
      "name": "Wait7",
      "webhookId": "fb3f8ed9-eb51-4a87-b28f-169f02c67b53"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5616,
        1040
      ],
      "id": "69c35d47-fc88-44cc-9442-3a403302f881",
      "name": "Wait8",
      "webhookId": "b5ab6b1c-0391-4576-8a03-a28641873670"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "560d53cb-600b-4637-9036-c1e78dc91035",
              "leftValue": "={{ $json.youtubeChannelFound }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3792,
        1184
      ],
      "id": "f7706aae-2e6b-45a7-90d0-984fab2dd0fe",
      "name": "Check YouTube Channel Exists"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8ecb550d-7100-4f29-82de-5c5ab1b5efa4",
              "leftValue": "={{ $json.contentDetails.relatedPlaylists.uploads }}\n",
              "rightValue": true,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4736,
        1184
      ],
      "id": "3a65853c-30c5-4ce1-979e-8b56b4a7979e",
      "name": "Check Upload Playlist"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "68d14f5d-9882-4d2a-8993-a64f99b4d953",
              "leftValue": "={{ $json.videos }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        6096,
        1184
      ],
      "id": "893c92d9-533b-44a4-b5c9-9f83da3b90dc",
      "name": "Check Videos Found"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YouTube API —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ\nconst apiResponse = $input.first().json;\nconst previousData = $('video = true?1').first().json;\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ YouTube (ISO 8601)\nfunction parseDuration(duration) {\n  if (!duration) return 0;\n  \n  // YouTube –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601: PT#M#S –∏–ª–∏ PT#H#M#S\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  \n  if (!match) return 0;\n  \n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  \n  return hours * 3600 + minutes * 60 + seconds;\n}\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\nfunction formatDuration(seconds) {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n}\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö\nif (!apiResponse.items || !Array.isArray(apiResponse.items)) {\n  console.log(\"No video duration data received\");\n  return [{\n    json: {\n      company_name: previousData.company_name || \"Unknown\",\n      company_url: previousData.company_url || null,\n      videos: [],\n      video_count: 0,\n      has_videos: false,\n      filter_stats: previousData.filter_stats || {},\n      error: \"No video data received from YouTube API\",\n      processing_complete: true,\n      processing_date: new Date().toISOString()\n    }\n  }];\n}\n\n// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\nconst MIN_DURATION_SECONDS = 15; // –ú–∏–Ω–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥\nconst MAX_DURATION_SECONDS = 60; // –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥\n\n// –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\nconst filteredVideos = [];\nconst rejectedVideos = {\n  tooShort: [],\n  tooLong: []\n};\n\n// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞\nconst videoData = previousData.video_data || {};\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ\nfor (const video of apiResponse.items) {\n  try {\n    const videoId = video.id;\n    const duration = video.contentDetails?.duration;\n    \n    if (!duration) {\n      console.log(`No duration for video ${videoId}`);\n      continue;\n    }\n    \n    const durationInSeconds = parseDuration(duration);\n    const videoInfo = videoData[videoId] || {};\n    \n    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n    if (durationInSeconds < MIN_DURATION_SECONDS) {\n      rejectedVideos.tooShort.push({\n        id: videoId,\n        title: videoInfo.title || \"Unknown\",\n        duration_seconds: durationInSeconds,\n        duration_formatted: formatDuration(durationInSeconds)\n      });\n    } else if (durationInSeconds > MAX_DURATION_SECONDS) {\n      rejectedVideos.tooLong.push({\n        id: videoId,\n        title: videoInfo.title || \"Unknown\",\n        duration_seconds: durationInSeconds,\n        duration_formatted: formatDuration(durationInSeconds)\n      });\n    } else {\n      // –í–∏–¥–µ–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n      filteredVideos.push({\n        id: videoId,\n        url: `https://www.youtube.com/watch?v=${videoId}`,\n        title: videoInfo.title || \"Unknown\",\n        description: videoInfo.description || \"\",\n        published_at: videoInfo.published_at || null,\n        duration_seconds: durationInSeconds,\n        duration_formatted: formatDuration(durationInSeconds),\n        thumbnail: videoInfo.thumbnail || null,\n        channel_title: videoInfo.channel_title || previousData.company_name\n      });\n    }\n    \n  } catch (error) {\n    console.log(`Error processing video: ${error.message}`);\n    continue;\n  }\n}\n\n// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)\nfilteredVideos.sort((a, b) => {\n  const dateA = new Date(a.published_at || 0);\n  const dateB = new Date(b.published_at || 0);\n  return dateB - dateA;\n});\n\n// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–æ 15\nconst maxVideos = 15;\nconst finalVideos = filteredVideos.slice(0, maxVideos);\n\n// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\nconst stats = {\n  total_checked: apiResponse.items.length,\n  passed_duration_filter: filteredVideos.length,\n  too_short: rejectedVideos.tooShort.length,\n  too_long: rejectedVideos.tooLong.length,\n  final_count: finalVideos.length\n};\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º\nif (!finalVideos || !Array.isArray(finalVideos)) {\n  console.log(\"Warning: finalVideos is not an array\");\n  finalVideos = [];\n}\n// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\nreturn [{\n  json: {\n    company_name: previousData.company_name || \"Unknown\",\n    company_url: previousData.company_url || null,\n    videos: finalVideos,\n    video_count: finalVideos.length,\n    has_videos: finalVideos.length > 0,\n    filter_stats: {\n      ...previousData.filter_stats,\n      ...stats\n    },\n    rejected_videos: rejectedVideos,\n    processing_complete: true,\n    processing_date: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5952,
        1040
      ],
      "id": "1ca78583-429c-4831-a73a-25e550188043",
      "name": "Filter Videos by Duration"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "company_name"
            },
            {
              "fieldName": "company_url"
            },
            {
              "fieldName": "videos"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        6304,
        1088
      ],
      "id": "00678966-e48e-4339-a474-1fdec43cb0f4",
      "name": "Sort2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3776,
        752
      ],
      "id": "97f588df-4b24-4e6b-beec-f8a610d70080",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {
        "jsCode": "// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)\nconst sortedItems = $input.all().sort((a, b) => {\n  const aVideos = a.json.video_count || a.json.videos?.length || 0;\n  const bVideos = b.json.video_count || b.json.videos?.length || 0;\n  return bVideos - aVideos; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é\n});\n\nreturn sortedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4096,
        688
      ],
      "id": "efde0646-2f16-4cdf-9c22-aab2d0d582d6",
      "name": "sorting videos with videos"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\nconst inputData = $input.first().json;\n\n// –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ø–æ–ª—è text (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞)\nlet data;\ntry {\n  data = typeof inputData.text === 'string' \n    ? JSON.parse(inputData.text) \n    : inputData.text;\n} catch (error) {\n  data = [{ text: inputData.text || '', meta: {} }];\n}\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤\nif (!Array.isArray(data)) {\n  data = [data];\n}\n\n// –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç\nlet formattedText = '<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ YouTube</b>\\n\\n';\n\n// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ\nconst meta = data[0]?.meta || {};\nformattedText += `üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π —Å –≤–∏–¥–µ–æ: <b>${meta.companies_with_videos || 0}</b>\\n`;\nformattedText += `üìå –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: <b>${meta.total_companies || 0}</b>\\n\\n`;\nformattedText += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n';\n\n// –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏\nconst text = data[0]?.text || '';\nconst companyBlocks = text.split('‚Äî <b>').slice(1); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫\n\ncompanyBlocks.forEach((block, index) => {\n  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n  const companyNameMatch = block.match(/^(.+?)<\\/b>/);\n  const companyName = companyNameMatch ? companyNameMatch[1] : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';\n  \n  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–π—Ç\n  const websiteMatch = block.match(/–°–∞–π—Ç: <a href=\"(.+?)\">(.+?)<\\/a>/);\n  const website = websiteMatch ? websiteMatch[2] : '';\n  \n  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n  const videoCountMatch = block.match(/–í–∏–¥–µ–æ \\((\\d+)\\):/);\n  const videoCount = videoCountMatch ? videoCountMatch[1] : '0';\n  \n  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏\n  formattedText += `<b>${index + 1}. ${companyName}</b>\\n`;\n  if (website) {\n    formattedText += `üåê <a href=\"${websiteMatch[1]}\">${website}</a>\\n`;\n  }\n  formattedText += `üé¨ –í–∏–¥–µ–æ: ${videoCount}\\n\\n`;\n  \n  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–µ–æ (–ë–ï–ó –û–ü–ò–°–ê–ù–ò–ô)\n  const videoMatches = [...block.matchAll(/üé¨ –í–∏–¥–µ–æ \\d+: <a href=\"(.+?)\">(.+?)<\\/a>/g)];\n  \n  videoMatches.forEach((video, vIndex) => {\n    const videoUrl = video[1];\n    const videoTitle = video[2];\n    formattedText += `   ${vIndex + 1}. <a href=\"${videoUrl}\">${videoTitle}</a>\\n`;\n  });\n  \n  formattedText += '\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n';\n});\n\nconst fullText = formattedText.trim();\nconst maxLength = 4096; // –õ–∏–º–∏—Ç Telegram\n\n// ======= –†–ê–ó–ë–ò–í–ö–ê –ù–ê –ß–ê–°–¢–ò =======\nfunction splitTextIntoChunks(text, maxLength) {\n  const chunks = [];\n  let currentChunk = '';\n  const lines = text.split('\\n');\n  \n  for (const line of lines) {\n    if ((currentChunk + line + '\\n').length <= maxLength) {\n      currentChunk += line + '\\n';\n    } else {\n      if (currentChunk.trim()) {\n        chunks.push(currentChunk.trim());\n      }\n      \n      if (line.length > maxLength) {\n        let remainingLine = line;\n        while (remainingLine.length > maxLength) {\n          chunks.push(remainingLine.substring(0, maxLength));\n          remainingLine = remainingLine.substring(maxLength);\n        }\n        currentChunk = remainingLine ? remainingLine + '\\n' : '';\n      } else {\n        currentChunk = line + '\\n';\n      }\n    }\n  }\n  \n  if (currentChunk.trim()) {\n    chunks.push(currentChunk.trim());\n  }\n  \n  return chunks;\n}\n\nconst textChunks = splitTextIntoChunks(fullText, maxLength);\n\n// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏\nconst outputItems = textChunks.map((chunk, index) => ({\n  json: {\n    message_text: index > 0 \n      ? `üìÑ –ß–∞—Å—Ç—å ${index + 1}/${textChunks.length}\\n\\n${chunk}`\n      : chunk,\n    part_number: index + 1,\n    total_parts: textChunks.length,\n    character_count: chunk.length,\n    is_last_part: index === textChunks.length - 1\n  }\n}));\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4256,
        688
      ],
      "id": "859a88ad-de70-436a-bdd8-5e53b111230c",
      "name": "format text"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞.\n\n–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: https://openai.com",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1632,
        1248
      ],
      "id": "a31ce656-4308-440e-8917-729dc2ca7989",
      "name": "Send a text message3",
      "webhookId": "659bbfe5-b34d-4cd4-9401-4ac622c4b9c1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bb495e77-c60e-4e2d-bcae-963ad02c5964",
              "leftValue": "={{ $json.pageInfo.totalResults }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4336,
        1200
      ],
      "id": "229e4535-d918-4057-ab12-cae66683a8f3",
      "name": "check result"
    },
    {
      "parameters": {
        "content": "## - –ü—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram —Å —Å—Å—ã–ª–∫–æ–π.\n## - –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ ‚Äî –¥–≤–∞ –ò–ò: –æ–¥–∏–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏—é, –¥—Ä—É–≥–æ–π –Ω–∞—Ö–æ–¥–∏—Ç 15 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.\n## - –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.\n",
        "height": 912,
        "width": 1248,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1584,
        656
      ],
      "id": "d3ed9e68-da92-405e-8e4e-3d230d6f1815",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## - –ü–∞—Ä—Å–∏–Ω–≥ URL –≥–ª–∞–Ω–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏—Ç url –Ω–∞ Youtube –∫–∞–Ω–∞–ª",
        "height": 800,
        "width": 688,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2848,
        768
      ],
      "id": "12e52b6c-cdcb-489f-a537-ad462b98cf18",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ—è–¥–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ youtube. –í–∏–¥–µ–æ –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã –∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥",
        "height": 592,
        "width": 2816,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3648,
        976
      ],
      "id": "3ead9f33-353e-43f5-b8de-6be49dfc2da1",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º",
        "height": 528,
        "width": 1488,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3760,
        416
      ],
      "id": "8b5b3b25-44d7-40e0-9d06-e4fee9c7f76d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# üîë –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API-–∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã workflow\n\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ workflow —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å **3 API-–∫–ª—é—á–∞**. –ù–∏–∂–µ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—é –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é.\n\n---\n\n## 1Ô∏è‚É£ OpenRouter API Key\n\n**–î–ª—è —á–µ–≥–æ:** –ï–¥–∏–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º (Perplexity Sonar, –æ—Å–Ω–æ–≤–Ω—ã–µ LLM –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤)\n\n### –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [openrouter.ai](https://openrouter.ai/)\n2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª **API Keys**\n4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ\n\n### –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:\n- –í—Å–µ –Ω–æ–¥—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏\n- Perplexity: Sonar (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞)\n- –û—Å–Ω–æ–≤–Ω—ã–µ AI-–∞–≥–µ–Ω—Ç—ã workflow\n\n> ‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –•—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.\n\n---\n\n## 2Ô∏è‚É£ YouTube Data API v3 Key\n\n**–î–ª—è —á–µ–≥–æ:** –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö, –ø–ª–µ–π–ª–∏—Å—Ç–∞—Ö –∏ –≤–∏–¥–µ–æ —Å YouTube\n\n### –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n\n#### –®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console\n1. –û—Ç–∫—Ä–æ–π—Ç–µ [Google Cloud Console](https://console.cloud.google.com)\n2. –ù–∞–∂–º–∏—Ç–µ **Select a project** ‚Üí **New Project**\n3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"n8n YouTube Integration\")\n4. –ù–∞–∂–º–∏—Ç–µ **Create**\n\n#### –®–∞–≥ 2: –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ YouTube Data API v3\n1. –í –º–µ–Ω—é —Å–ª–µ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **APIs & Services** ‚Üí **Library**\n2. –ù–∞–π–¥–∏—Ç–µ **\"YouTube Data API v3\"**\n3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ API ‚Üí **Enable**\n\n#### –®–∞–≥ 3: –°–æ–∑–¥–∞–π—Ç–µ API-–∫–ª—é—á\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **APIs & Services** ‚Üí **Credentials**\n2. –ù–∞–∂–º–∏—Ç–µ **+ Create Credentials** ‚Üí **API Key**\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n4. *(–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)* –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–ª—é—á —Ç–æ–ª—å–∫–æ –¥–ª—è YouTube Data API v3 –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n### –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:\n- **–ù–æ–¥–∞:** `Get ID channel for nickname` ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏\n- **–ù–æ–¥–∞:** `Get a channel1` ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ\n- **–ù–æ–¥–∞:** `Get playlist videos1` ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞\n- **–ù–æ–¥–∞:** `Get video >60sec1` ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥\n\n> üí° **–ö–≤–æ—Ç—ã:** –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç ‚Äî 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å. –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n\n---\n\n## 3Ô∏è‚É£ Firecrawl API Key\n\n**–î–ª—è —á–µ–≥–æ:** –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å YouTube (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)\n\n### –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [firecrawl.dev](https://www.firecrawl.dev/)\n2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ\n3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª **API Keys** –≤ Dashboard\n4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ\n\n### –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:\n- **–ù–æ–¥–∞:** `Firecrawl URL` ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ (—Ç–µ–∫—Å—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)\n\n> üî• **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:** Firecrawl –æ–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è YouTube –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n---\n\n## ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º\n\n- [ ] OpenRouter API Key –¥–æ–±–∞–≤–ª–µ–Ω –≤ credentials n8n\n- [ ] YouTube Data API v3 Key –¥–æ–±–∞–≤–ª–µ–Ω –≤ credentials n8n\n- [ ] Firecrawl API Key –¥–æ–±–∞–≤–ª–µ–Ω –≤ credentials n8n\n- [ ] –í—Å–µ –Ω–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ credentials\n- [ ] –ü—Ä–æ–≤–µ–¥—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ workflow\n\n---\n\n## üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è n8n](https://docs.n8n.io)\n- [YouTube Data API Reference](https://developers.google.com/youtube/v3)\n- [OpenRouter API Docs](https://openrouter.ai/docs)\n- [Firecrawl Documentation](https://docs.firecrawl.dev)\n\n---\n\n**–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:** 1.0  \n**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** 01.10.2025\n\n## devoloper @mxpkns",
        "height": 2368,
        "width": 976
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "2dcb2427-3ce4-4505-ae08-ff7e05deb675",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "toolDescription": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–∞–∑–¥–µ–ª—ã \"–û –∫–æ–º–ø–∞–Ω–∏–∏\" –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.",
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"perplexity/sonar\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('If').item.json.referenced }}\"\n    }\n  ],\n  \"temperature\": 0.1\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        464,
        320
      ],
      "id": "47b4c14c-f9a4-4078-b67f-94a3be8aeb43",
      "name": "Perplexity: Sonar2"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        464,
        480
      ],
      "id": "c4bcdcab-e529-4b60-a340-57b9388dd640",
      "name": "gpt4.1 mini1"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet"
            },
            {
              "name": "type",
              "value": "channel"
            },
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        528,
        784
      ],
      "id": "8abfcc38-e25f-48f7-b5c9-e8aad6f11401",
      "name": "get a id channel for nickname1"
    },
    {
      "parameters": {
        "operation": "get",
        "channelId": "={{ $json.items[0].id.channelId }}"
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        752,
        784
      ],
      "id": "1dac2371-e06d-418a-a52d-c2fdc65d74f2",
      "name": "Get a channel"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/playlistItems",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            },
            {
              "name": "playlistId",
              "value": "={{ $json.contentDetails.relatedPlaylists.uploads }}"
            },
            {
              "name": "part",
              "value": "snippet,contentDetails"
            },
            {
              "name": "maxResults",
              "value": "50"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        528,
        976
      ],
      "id": "5ea29f79-8fce-49ea-8e33-2a311c839e2e",
      "name": "get playlist videos",
      "retryOnFail": false,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyDgwEL_yRd4DLKcaJQP9ao7SdeK5EiRRhE"
            },
            {
              "name": "id",
              "value": "={{ $json.video_ids_to_check }}"
            },
            {
              "name": "part",
              "value": "contentDetails"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        976
      ],
      "id": "aba6540e-fb9e-4f0f-8b2f-26f332565df6",
      "name": "get video  >60sec"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fc-e3eb11966aff4575975db593826d3be8"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{ $json.competitor_url }}\",\n  \"formats\": [\n    \"links\",\n    \"markdown\"\n  ],\n  \"onlyMainContent\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        1552
      ],
      "id": "c074f557-541c-4802-83f1-473b59f65fc9",
      "name": "firecrawl url1",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    }
  ],
  "connections": {
    "Perplexity: Sonar": {
      "ai_tool": [
        [
          {
            "node": "url analizator",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "url stripe": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "url analizator": {
      "main": [
        [
          {
            "node": "Competitor Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "url analizator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Competitor Research": {
      "main": [
        [
          {
            "node": "Normalize URL & Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity: Sonar1": {
      "ai_tool": [
        [
          {
            "node": "Competitor Research",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "sorting videos with videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "url stripe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "url analizator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Competitor Research",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "gpt4.1 mini": {
      "ai_languageModel": [
        [
          {
            "node": "url analizator",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Competitor Research",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "firecrawl url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize URL & Sort": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "firecrawl url": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Sort1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check YouTube Channel Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split url": {
      "main": [
        [
          {
            "node": "get a id channel for nickname",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a channel1": {
      "main": [
        [
          {
            "node": "Check Upload Playlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get a id channel for nickname": {
      "main": [
        [
          {
            "node": "check result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get playlist videos1": {
      "main": [
        [
          {
            "node": "Valid playlist?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter video1": {
      "main": [
        [
          {
            "node": "video = true?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "video = true?1": {
      "main": [
        [
          {
            "node": "Wait8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get video  >60sec1": {
      "main": [
        [
          {
            "node": "Filter Videos by Duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid playlist?1": {
      "main": [
        [
          {
            "node": "filter video1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait7": {
      "main": [
        [
          {
            "node": "get playlist videos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait8": {
      "main": [
        [
          {
            "node": "get video  >60sec1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check YouTube Channel Exists": {
      "main": [
        [
          {
            "node": "split url",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Playlist": {
      "main": [
        [
          {
            "node": "Wait7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Videos Found": {
      "main": [
        [
          {
            "node": "Sort2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Videos by Duration": {
      "main": [
        [
          {
            "node": "Check Videos Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort2": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing3": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sorting videos with videos": {
      "main": [
        [
          {
            "node": "format text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format text": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check result": {
      "main": [
        [
          {
            "node": "Get a channel1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "23888543ab7fca46124b3e59a5fa4e4f62802ef7d2ac315b4a55ba8970d3f6ec"
  }
}
